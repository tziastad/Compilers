
/* 

Παρακάτω βλέπετε την έξοδο της μεταγλώττισης την οποία ονομάζουμε στο πλαίσιο της προγραμματισρικής άσκησης "ισοδύναμο σε C". Από κάθε τετράδα του ενδιάμεσου κώδικα παράγουμε μία γραμμή γλώσσας C η οποία κάνει την ίδια δουλειά με την τετράδα. 

Σκοπός είναι με έναν compiler της C να μποροέσουμε να τρέξουμε το πρόγραμμα που φτιάξαμε ώστε να μπορούμε να ελέγξουμε με σιγουριά την ορθή λειτουργία του.

Τοποθετήστε εντολές print στα προγράμματά σας ώστε να φαίνεται ότι λειτουργούν.

ΠΡΟΣΟΧΗ: Στο ισοδύναμο C δεν μας ενδιαφέρει να ελέγξουμε τη λειτουργία των συναρτήσεων. Είναι νωρίς, δεν χρειάζεται να γίνει ακόμα. Μην υλοποιήσετε κάτι σχετικά, δεν χρειάζεται καν να βγάλετε μηνύματα λάθους ή προειδοποιήσεις, απλά περάστε προγράμματα που αποτελούνται από μία main και καμία άλλη συνάρτηση.


ΠΑΡΑΔΕΙΓΜΑ:
program exams
{
    declareint c,a,b,t enddeclare

    a:=1;
    while (a+b<1 and b<5)
    {
	    if (t=1) c:=2;
	    else if (t=2) c:=4;
	    else c:=0;
	
	    while (a<1)
		    if (a=2)
			    while(b=1)
				    c:=2;
    }
}


Το ισοδύναμο σε C ακολουθεί:

*/




int main()
{
  int a,b,T_1,t,c;
  L_0: 
  L_1: a=1; //(:=, 1,  , a)
  L_2: T_1=a+b; //(+, a, b, T_1)
  L_3: if (T_1<1) goto L_5; //(<, T_1, 1, 5)
  L_4: goto L_27; //(JUMP,  ,  , 27)
  L_5: if (b<5) goto L_7; //(<, b, 5, 7)
  L_6: goto L_27; //(JUMP,  ,  , 27)
  L_7: if (t==1) goto L_9; //(=, t, 1, 9)
  L_8: goto L_11; //(JUMP,  ,  , 11)
  L_9: c=2; //(:=, 2,  , c)
  L_10: goto L_16; //(JUMP,  ,  , 16)
  L_11: if (t==2) goto L_13; //(=, t, 2, 13)
  L_12: goto L_15; //(JUMP,  ,  , 15)
  L_13: c=4; //(:=, 4,  , c)
  L_14: goto L_16; //(JUMP,  ,  , 16)
  L_15: c=0; //(:=, 0,  , c)
  L_16: goto L_18; //(JUMP,  ,  , 18)
  L_17: goto L_26; //(JUMP,  ,  , 26)
  L_18: if (a==2) goto L_20; //(=, a, 2, 20)
  L_19: goto L_25; //(JUMP,  ,  , 25)
  L_20: if (b==1) goto L_22; //(=, b, 1, 22)
  L_21: goto L_24; //(JUMP,  ,  , 24)
  L_22: c=2; // (:=, 2,  , c)
  L_23: goto L_20; //(JUMP,  ,  , 20)
  L_24: goto L_25; //(JUMP,  ,  , 25)
  L_25: goto L_16; //(JUMP,  ,  , 16)
  L_26: goto L_2; //(JUMP,  ,  , 2)
  L_27: {}
}